
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00008024  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00007c00  00007c00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000498  2**0
                  CONTENTS, READONLY
  3 .stab         00001260  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1c  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007c00 <main>:
    7c00:	1f 92       	push	r1
    7c02:	cd b7       	in	r28, 0x3d	; 61
    7c04:	de b7       	in	r29, 0x3e	; 62
    7c06:	11 24       	eor	r1, r1
    7c08:	14 b7       	in	r17, 0x34	; 52
    7c0a:	14 be       	out	0x34, r1	; 52
    7c0c:	83 e5       	ldi	r24, 0x53	; 83
    7c0e:	fa d0       	rcall	.+500    	; 0x7e04 <putch>
    7c10:	11 fd       	sbrc	r17, 1
    7c12:	06 c0       	rjmp	.+12     	; 0x7c20 <main+0x20>
    7c14:	13 fd       	sbrc	r17, 3
    7c16:	fd d0       	rcall	.+506    	; 0x7e12 <CheckFlashImage>
    7c18:	81 e4       	ldi	r24, 0x41	; 65
    7c1a:	f4 d0       	rcall	.+488    	; 0x7e04 <putch>
    7c1c:	81 2f       	mov	r24, r17
    7c1e:	f9 d1       	rcall	.+1010   	; 0x8012 <appStart>
    7c20:	85 e0       	ldi	r24, 0x05	; 5
    7c22:	80 93 81 00 	sts	0x0081, r24
    7c26:	82 e0       	ldi	r24, 0x02	; 2
    7c28:	80 93 c0 00 	sts	0x00C0, r24
    7c2c:	88 e1       	ldi	r24, 0x18	; 24
    7c2e:	80 93 c1 00 	sts	0x00C1, r24
    7c32:	96 e0       	ldi	r25, 0x06	; 6
    7c34:	90 93 c2 00 	sts	0x00C2, r25
    7c38:	98 e0       	ldi	r25, 0x08	; 8
    7c3a:	90 93 c4 00 	sts	0x00C4, r25
    7c3e:	80 93 60 00 	sts	0x0060, r24
    7c42:	8e e0       	ldi	r24, 0x0E	; 14
    7c44:	80 93 60 00 	sts	0x0060, r24
    7c48:	21 9a       	sbi	0x04, 1	; 4
    7c4a:	86 e0       	ldi	r24, 0x06	; 6
    7c4c:	28 e1       	ldi	r18, 0x18	; 24
    7c4e:	3e ef       	ldi	r19, 0xFE	; 254
    7c50:	91 e0       	ldi	r25, 0x01	; 1
    7c52:	30 93 85 00 	sts	0x0085, r19
    7c56:	20 93 84 00 	sts	0x0084, r18
    7c5a:	96 bb       	out	0x16, r25	; 22
    7c5c:	b0 9b       	sbis	0x16, 0	; 22
    7c5e:	fe cf       	rjmp	.-4      	; 0x7c5c <main+0x5c>
    7c60:	19 9a       	sbi	0x03, 1	; 3
    7c62:	a8 95       	wdr
    7c64:	81 50       	subi	r24, 0x01	; 1
    7c66:	a9 f7       	brne	.-22     	; 0x7c52 <main+0x52>
    7c68:	61 2c       	mov	r6, r1
    7c6a:	71 2c       	mov	r7, r1
    7c6c:	08 e1       	ldi	r16, 0x18	; 24
    7c6e:	28 e0       	ldi	r18, 0x08	; 8
    7c70:	f2 2e       	mov	r15, r18
    7c72:	ee 24       	eor	r14, r14
    7c74:	e3 94       	inc	r14
    7c76:	35 e0       	ldi	r19, 0x05	; 5
    7c78:	d3 2e       	mov	r13, r19
    7c7a:	41 e1       	ldi	r20, 0x11	; 17
    7c7c:	c4 2e       	mov	r12, r20
    7c7e:	13 e0       	ldi	r17, 0x03	; 3
    7c80:	a1 d1       	rcall	.+834    	; 0x7fc4 <getch>
    7c82:	81 34       	cpi	r24, 0x41	; 65
    7c84:	69 f4       	brne	.+26     	; 0x7ca0 <main+0xa0>
    7c86:	9e d1       	rcall	.+828    	; 0x7fc4 <getch>
    7c88:	89 83       	std	Y+1, r24	; 0x01
    7c8a:	aa d1       	rcall	.+852    	; 0x7fe0 <verifySpace>
    7c8c:	89 81       	ldd	r24, Y+1	; 0x01
    7c8e:	82 38       	cpi	r24, 0x82	; 130
    7c90:	f9 f0       	breq	.+62     	; 0x7cd0 <main+0xd0>
    7c92:	81 38       	cpi	r24, 0x81	; 129
    7c94:	11 f4       	brne	.+4      	; 0x7c9a <main+0x9a>
    7c96:	85 e0       	ldi	r24, 0x05	; 5
    7c98:	01 c0       	rjmp	.+2      	; 0x7c9c <main+0x9c>
    7c9a:	83 e0       	ldi	r24, 0x03	; 3
    7c9c:	b3 d0       	rcall	.+358    	; 0x7e04 <putch>
    7c9e:	7b c0       	rjmp	.+246    	; 0x7d96 <main+0x196>
    7ca0:	82 34       	cpi	r24, 0x42	; 66
    7ca2:	11 f4       	brne	.+4      	; 0x7ca8 <main+0xa8>
    7ca4:	84 e1       	ldi	r24, 0x14	; 20
    7ca6:	03 c0       	rjmp	.+6      	; 0x7cae <main+0xae>
    7ca8:	85 34       	cpi	r24, 0x45	; 69
    7caa:	19 f4       	brne	.+6      	; 0x7cb2 <main+0xb2>
    7cac:	85 e0       	ldi	r24, 0x05	; 5
    7cae:	a4 d1       	rcall	.+840    	; 0x7ff8 <getNch>
    7cb0:	72 c0       	rjmp	.+228    	; 0x7d96 <main+0x196>
    7cb2:	85 35       	cpi	r24, 0x55	; 85
    7cb4:	49 f4       	brne	.+18     	; 0x7cc8 <main+0xc8>
    7cb6:	86 d1       	rcall	.+780    	; 0x7fc4 <getch>
    7cb8:	b8 2e       	mov	r11, r24
    7cba:	84 d1       	rcall	.+776    	; 0x7fc4 <getch>
    7cbc:	6b 2c       	mov	r6, r11
    7cbe:	71 2c       	mov	r7, r1
    7cc0:	78 2a       	or	r7, r24
    7cc2:	66 0c       	add	r6, r6
    7cc4:	77 1c       	adc	r7, r7
    7cc6:	66 c0       	rjmp	.+204    	; 0x7d94 <main+0x194>
    7cc8:	86 35       	cpi	r24, 0x56	; 86
    7cca:	21 f4       	brne	.+8      	; 0x7cd4 <main+0xd4>
    7ccc:	84 e0       	ldi	r24, 0x04	; 4
    7cce:	94 d1       	rcall	.+808    	; 0x7ff8 <getNch>
    7cd0:	80 e0       	ldi	r24, 0x00	; 0
    7cd2:	e4 cf       	rjmp	.-56     	; 0x7c9c <main+0x9c>
    7cd4:	84 36       	cpi	r24, 0x64	; 100
    7cd6:	09 f0       	breq	.+2      	; 0x7cda <main+0xda>
    7cd8:	3f c0       	rjmp	.+126    	; 0x7d58 <main+0x158>
    7cda:	74 d1       	rcall	.+744    	; 0x7fc4 <getch>
    7cdc:	73 d1       	rcall	.+742    	; 0x7fc4 <getch>
    7cde:	98 2e       	mov	r9, r24
    7ce0:	71 d1       	rcall	.+738    	; 0x7fc4 <getch>
    7ce2:	61 14       	cp	r6, r1
    7ce4:	80 e7       	ldi	r24, 0x70	; 112
    7ce6:	78 06       	cpc	r7, r24
    7ce8:	18 f4       	brcc	.+6      	; 0x7cf0 <main+0xf0>
    7cea:	f3 01       	movw	r30, r6
    7cec:	17 bf       	out	0x37, r17	; 55
    7cee:	e8 95       	spm
    7cf0:	a1 2c       	mov	r10, r1
    7cf2:	bb 24       	eor	r11, r11
    7cf4:	b3 94       	inc	r11
    7cf6:	66 d1       	rcall	.+716    	; 0x7fc4 <getch>
    7cf8:	f5 01       	movw	r30, r10
    7cfa:	81 93       	st	Z+, r24
    7cfc:	5f 01       	movw	r10, r30
    7cfe:	9e 12       	cpse	r9, r30
    7d00:	fa cf       	rjmp	.-12     	; 0x7cf6 <main+0xf6>
    7d02:	61 14       	cp	r6, r1
    7d04:	f0 e7       	ldi	r31, 0x70	; 112
    7d06:	7f 06       	cpc	r7, r31
    7d08:	18 f0       	brcs	.+6      	; 0x7d10 <main+0x110>
    7d0a:	f3 01       	movw	r30, r6
    7d0c:	17 bf       	out	0x37, r17	; 55
    7d0e:	e8 95       	spm
    7d10:	67 d1       	rcall	.+718    	; 0x7fe0 <verifySpace>
    7d12:	07 b6       	in	r0, 0x37	; 55
    7d14:	00 fc       	sbrc	r0, 0
    7d16:	fd cf       	rjmp	.-6      	; 0x7d12 <main+0x112>
    7d18:	a3 01       	movw	r20, r6
    7d1a:	a0 e0       	ldi	r26, 0x00	; 0
    7d1c:	b1 e0       	ldi	r27, 0x01	; 1
    7d1e:	8c 91       	ld	r24, X
    7d20:	12 96       	adiw	r26, 0x02	; 2
    7d22:	9d 01       	movw	r18, r26
    7d24:	21 50       	subi	r18, 0x01	; 1
    7d26:	31 09       	sbc	r19, r1
    7d28:	f9 01       	movw	r30, r18
    7d2a:	20 81       	ld	r18, Z
    7d2c:	90 e0       	ldi	r25, 0x00	; 0
    7d2e:	92 2b       	or	r25, r18
    7d30:	fa 01       	movw	r30, r20
    7d32:	0c 01       	movw	r0, r24
    7d34:	e7 be       	out	0x37, r14	; 55
    7d36:	e8 95       	spm
    7d38:	11 24       	eor	r1, r1
    7d3a:	4e 5f       	subi	r20, 0xFE	; 254
    7d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    7d3e:	a0 38       	cpi	r26, 0x80	; 128
    7d40:	f1 e0       	ldi	r31, 0x01	; 1
    7d42:	bf 07       	cpc	r27, r31
    7d44:	61 f7       	brne	.-40     	; 0x7d1e <main+0x11e>
    7d46:	f3 01       	movw	r30, r6
    7d48:	d7 be       	out	0x37, r13	; 55
    7d4a:	e8 95       	spm
    7d4c:	07 b6       	in	r0, 0x37	; 55
    7d4e:	00 fc       	sbrc	r0, 0
    7d50:	fd cf       	rjmp	.-6      	; 0x7d4c <main+0x14c>
    7d52:	c7 be       	out	0x37, r12	; 55
    7d54:	e8 95       	spm
    7d56:	1f c0       	rjmp	.+62     	; 0x7d96 <main+0x196>
    7d58:	84 37       	cpi	r24, 0x74	; 116
    7d5a:	69 f4       	brne	.+26     	; 0x7d76 <main+0x176>
    7d5c:	33 d1       	rcall	.+614    	; 0x7fc4 <getch>
    7d5e:	32 d1       	rcall	.+612    	; 0x7fc4 <getch>
    7d60:	b8 2e       	mov	r11, r24
    7d62:	30 d1       	rcall	.+608    	; 0x7fc4 <getch>
    7d64:	3d d1       	rcall	.+634    	; 0x7fe0 <verifySpace>
    7d66:	f3 01       	movw	r30, r6
    7d68:	85 91       	lpm	r24, Z+
    7d6a:	3f 01       	movw	r6, r30
    7d6c:	4b d0       	rcall	.+150    	; 0x7e04 <putch>
    7d6e:	ba 94       	dec	r11
    7d70:	b1 10       	cpse	r11, r1
    7d72:	f9 cf       	rjmp	.-14     	; 0x7d66 <main+0x166>
    7d74:	10 c0       	rjmp	.+32     	; 0x7d96 <main+0x196>
    7d76:	85 37       	cpi	r24, 0x75	; 117
    7d78:	39 f4       	brne	.+14     	; 0x7d88 <main+0x188>
    7d7a:	32 d1       	rcall	.+612    	; 0x7fe0 <verifySpace>
    7d7c:	8e e1       	ldi	r24, 0x1E	; 30
    7d7e:	42 d0       	rcall	.+132    	; 0x7e04 <putch>
    7d80:	85 e9       	ldi	r24, 0x95	; 149
    7d82:	40 d0       	rcall	.+128    	; 0x7e04 <putch>
    7d84:	8f e0       	ldi	r24, 0x0F	; 15
    7d86:	8a cf       	rjmp	.-236    	; 0x7c9c <main+0x9c>
    7d88:	81 35       	cpi	r24, 0x51	; 81
    7d8a:	21 f4       	brne	.+8      	; 0x7d94 <main+0x194>
    7d8c:	00 93 60 00 	sts	0x0060, r16
    7d90:	f0 92 60 00 	sts	0x0060, r15
    7d94:	25 d1       	rcall	.+586    	; 0x7fe0 <verifySpace>
    7d96:	80 e1       	ldi	r24, 0x10	; 16
    7d98:	35 d0       	rcall	.+106    	; 0x7e04 <putch>
    7d9a:	72 cf       	rjmp	.-284    	; 0x7c80 <main+0x80>

00007d9c <SPI_transfer>:
#define SPIFLASH_JEDECID          0x9F        // read JEDEC ID
#define DEBUG_ON                            // uncomment to enable Serial debugging 
                                              // (will output different characters depending on which path the bootloader takes)

uint8_t SPI_transfer(uint8_t _data) {
  SPDR = _data;
    7d9c:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)));
    7d9e:	0d b4       	in	r0, 0x2d	; 45
    7da0:	07 fe       	sbrs	r0, 7
    7da2:	fd cf       	rjmp	.-6      	; 0x7d9e <SPI_transfer+0x2>
  return SPDR;
    7da4:	8e b5       	in	r24, 0x2e	; 46
}
    7da6:	08 95       	ret

00007da8 <FLASH_busy>:

uint8_t FLASH_busy()
{
  FLASH_SELECT;
    7da8:	28 98       	cbi	0x05, 0	; 5
  SPI_transfer(SPIFLASH_STATUSREAD);
    7daa:	85 e0       	ldi	r24, 0x05	; 5
    7dac:	f7 df       	rcall	.-18     	; 0x7d9c <SPI_transfer>
    7dae:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t status = SPI_transfer(0);
    7db0:	f5 df       	rcall	.-22     	; 0x7d9c <SPI_transfer>
    7db2:	28 9a       	sbi	0x05, 0	; 5
    7db4:	81 70       	andi	r24, 0x01	; 1
  FLASH_UNSELECT;
    7db6:	08 95       	ret

00007db8 <FLASH_command>:
  return status & 1;
}

void FLASH_command(uint8_t cmd, uint8_t isWrite){
    7db8:	cf 93       	push	r28
    7dba:	c8 2f       	mov	r28, r24
  if (isWrite)
    7dbc:	66 23       	and	r22, r22
    7dbe:	21 f0       	breq	.+8      	; 0x7dc8 <FLASH_command+0x10>
  {
    FLASH_command(SPIFLASH_WRITEENABLE, 0); // Write Enable
    7dc0:	60 e0       	ldi	r22, 0x00	; 0
    7dc2:	86 e0       	ldi	r24, 0x06	; 6
    7dc4:	f9 df       	rcall	.-14     	; 0x7db8 <FLASH_command>
    7dc6:	28 9a       	sbi	0x05, 0	; 5
    FLASH_UNSELECT;
    7dc8:	ef df       	rcall	.-34     	; 0x7da8 <FLASH_busy>
  }
  while(FLASH_busy()); //wait for chip to become available
    7dca:	81 11       	cpse	r24, r1
    7dcc:	fd cf       	rjmp	.-6      	; 0x7dc8 <FLASH_command+0x10>
    7dce:	28 98       	cbi	0x05, 0	; 5
    7dd0:	8c 2f       	mov	r24, r28
  FLASH_SELECT;
    7dd2:	cf 91       	pop	r28
  SPI_transfer(cmd);
    7dd4:	e3 cf       	rjmp	.-58     	; 0x7d9c <SPI_transfer>

00007dd6 <FLASH_readByte>:
}

uint8_t FLASH_readByte(uint32_t addr) {
    7dd6:	cf 92       	push	r12
    7dd8:	df 92       	push	r13
    7dda:	ef 92       	push	r14
    7ddc:	ff 92       	push	r15
    7dde:	6b 01       	movw	r12, r22
    7de0:	7c 01       	movw	r14, r24
  FLASH_command(SPIFLASH_ARRAYREADLOWFREQ, 0);
    7de2:	60 e0       	ldi	r22, 0x00	; 0
    7de4:	83 e0       	ldi	r24, 0x03	; 3
    7de6:	e8 df       	rcall	.-48     	; 0x7db8 <FLASH_command>
    7de8:	8e 2d       	mov	r24, r14
  SPI_transfer(addr >> 16);
    7dea:	d8 df       	rcall	.-80     	; 0x7d9c <SPI_transfer>
    7dec:	8d 2d       	mov	r24, r13
    7dee:	d6 df       	rcall	.-84     	; 0x7d9c <SPI_transfer>
  SPI_transfer(addr >> 8);
    7df0:	8c 2d       	mov	r24, r12
    7df2:	d4 df       	rcall	.-88     	; 0x7d9c <SPI_transfer>
    7df4:	80 e0       	ldi	r24, 0x00	; 0
  SPI_transfer(addr);
    7df6:	d2 df       	rcall	.-92     	; 0x7d9c <SPI_transfer>
    7df8:	28 9a       	sbi	0x05, 0	; 5
    7dfa:	ff 90       	pop	r15
  //SPI.transfer(0); //"dont care", needed with SPIFLASH_ARRAYREAD command only
  uint8_t result = SPI_transfer(0);
    7dfc:	ef 90       	pop	r14
    7dfe:	df 90       	pop	r13
    7e00:	cf 90       	pop	r12
  FLASH_UNSELECT;
    7e02:	08 95       	ret

00007e04 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7e04:	90 91 c0 00 	lds	r25, 0x00C0
    7e08:	95 ff       	sbrs	r25, 5
    7e0a:	fc cf       	rjmp	.-8      	; 0x7e04 <putch>
  UART_UDR = ch;
    7e0c:	80 93 c6 00 	sts	0x00C6, r24
    7e10:	08 95       	ret

00007e12 <CheckFlashImage>:
  uint8_t result = SPI_transfer(0);
  FLASH_UNSELECT;
  return result;
}

void CheckFlashImage() {
    7e12:	9f 92       	push	r9
    7e14:	af 92       	push	r10
    7e16:	bf 92       	push	r11
    7e18:	cf 92       	push	r12
    7e1a:	df 92       	push	r13
    7e1c:	ef 92       	push	r14
    7e1e:	ff 92       	push	r15
    7e20:	0f 93       	push	r16
    7e22:	1f 93       	push	r17
    7e24:	cf 93       	push	r28
    7e26:	df 93       	push	r29
#ifdef DEBUG_ON
  putch('F');
    7e28:	86 e4       	ldi	r24, 0x46	; 70
    7e2a:	ec df       	rcall	.-40     	; 0x7e04 <putch>
    7e2c:	88 e1       	ldi	r24, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e2e:	80 93 60 00 	sts	0x0060, r24
    7e32:	10 92 60 00 	sts	0x0060, r1
  WDTCSR = x;
    7e36:	84 b1       	in	r24, 0x04	; 4
#endif
  watchdogConfig(WATCHDOG_OFF);

  //SPI INIT
#if defined(__AVR_ATmega168__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega88) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega88__)
  DDRB |= _BV(FLASHSS) | _BV(SS) | _BV(PB3) | _BV(PB5); //OUTPUTS for FLASH_SS and SS, MOSI, SCK
    7e38:	8d 62       	ori	r24, 0x2D	; 45
    7e3a:	84 b9       	out	0x04, r24	; 4
    7e3c:	28 9a       	sbi	0x05, 0	; 5
  FLASH_UNSELECT; //unselect FLASH chip
    7e3e:	2a 9a       	sbi	0x05, 2	; 5
  PORTB |= _BV(SS); //set SS HIGH
    7e40:	8c b5       	in	r24, 0x2c	; 44
  //SPCR = (SPCR & ~SPI_MODE_MASK) | SPI_MODE0 ; //SPI MODE 0
  //SPCR = (SPCR & ~SPI_CLOCK_MASK) | (SPI_CLOCK_DIV2 & SPI_CLOCK_MASK); //clock divider = 2
  //SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((SPI_CLOCK_DIV2 >> 2) & SPI_2XCLOCK_MASK);

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI automatically switches to Slave, so the data direction of the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR) | _BV(SPE); //enable SPI and set SPI to MASTER mode
    7e42:	80 65       	ori	r24, 0x50	; 80
    7e44:	8c bd       	out	0x2c, r24	; 44
    7e46:	28 98       	cbi	0x05, 0	; 5

  //read first byte of JEDECID, if chip is present it should return a non-0 and non-FF value
  FLASH_SELECT;
    7e48:	8f e9       	ldi	r24, 0x9F	; 159
  SPI_transfer(SPIFLASH_JEDECID);
    7e4a:	a8 df       	rcall	.-176    	; 0x7d9c <SPI_transfer>
    7e4c:	80 e0       	ldi	r24, 0x00	; 0
    7e4e:	a6 df       	rcall	.-180    	; 0x7d9c <SPI_transfer>
  uint8_t deviceId = SPI_transfer(0);
    7e50:	28 9a       	sbi	0x05, 0	; 5
    7e52:	81 50       	subi	r24, 0x01	; 1
    7e54:	8e 3f       	cpi	r24, 0xFE	; 254
  FLASH_UNSELECT;
    7e56:	08 f0       	brcs	.+2      	; 0x7e5a <CheckFlashImage+0x48>
  if (deviceId==0 || deviceId==0xFF) return;
    7e58:	a9 c0       	rjmp	.+338    	; 0x7fac <CheckFlashImage+0x19a>
    7e5a:	61 e0       	ldi	r22, 0x01	; 1
    7e5c:	81 e0       	ldi	r24, 0x01	; 1
    7e5e:	ac df       	rcall	.-168    	; 0x7db8 <FLASH_command>
  
  //global unprotect  
  FLASH_command(SPIFLASH_STATUSWRITE, 1);
    7e60:	80 e0       	ldi	r24, 0x00	; 0
    7e62:	9c df       	rcall	.-200    	; 0x7d9c <SPI_transfer>
    7e64:	28 9a       	sbi	0x05, 0	; 5
    7e66:	60 e0       	ldi	r22, 0x00	; 0
  SPI_transfer(0);
    7e68:	70 e0       	ldi	r23, 0x00	; 0
    7e6a:	cb 01       	movw	r24, r22
    7e6c:	b4 df       	rcall	.-152    	; 0x7dd6 <FLASH_readByte>
  FLASH_UNSELECT;
    7e6e:	86 34       	cpi	r24, 0x46	; 70
  
  //check if any flash image exists on external FLASH chip
  if (FLASH_readByte(0)=='F' && FLASH_readByte(1)=='L' && FLASH_readByte(2)=='X' && FLASH_readByte(6)==':' && FLASH_readByte(9)==':')
    7e70:	09 f0       	breq	.+2      	; 0x7e74 <CheckFlashImage+0x62>
    7e72:	8f c0       	rjmp	.+286    	; 0x7f92 <CheckFlashImage+0x180>
    7e74:	61 e0       	ldi	r22, 0x01	; 1
    7e76:	70 e0       	ldi	r23, 0x00	; 0
    7e78:	80 e0       	ldi	r24, 0x00	; 0
    7e7a:	90 e0       	ldi	r25, 0x00	; 0
    7e7c:	ac df       	rcall	.-168    	; 0x7dd6 <FLASH_readByte>
    7e7e:	8c 34       	cpi	r24, 0x4C	; 76
    7e80:	09 f0       	breq	.+2      	; 0x7e84 <CheckFlashImage+0x72>
    7e82:	87 c0       	rjmp	.+270    	; 0x7f92 <CheckFlashImage+0x180>
    7e84:	62 e0       	ldi	r22, 0x02	; 2
    7e86:	70 e0       	ldi	r23, 0x00	; 0
    7e88:	80 e0       	ldi	r24, 0x00	; 0
    7e8a:	90 e0       	ldi	r25, 0x00	; 0
    7e8c:	a4 df       	rcall	.-184    	; 0x7dd6 <FLASH_readByte>
    7e8e:	88 35       	cpi	r24, 0x58	; 88
    7e90:	09 f0       	breq	.+2      	; 0x7e94 <CheckFlashImage+0x82>
    7e92:	7f c0       	rjmp	.+254    	; 0x7f92 <CheckFlashImage+0x180>
    7e94:	66 e0       	ldi	r22, 0x06	; 6
    7e96:	70 e0       	ldi	r23, 0x00	; 0
    7e98:	80 e0       	ldi	r24, 0x00	; 0
    7e9a:	90 e0       	ldi	r25, 0x00	; 0
    7e9c:	9c df       	rcall	.-200    	; 0x7dd6 <FLASH_readByte>
    7e9e:	8a 33       	cpi	r24, 0x3A	; 58
    7ea0:	09 f0       	breq	.+2      	; 0x7ea4 <CheckFlashImage+0x92>
    7ea2:	77 c0       	rjmp	.+238    	; 0x7f92 <CheckFlashImage+0x180>
    7ea4:	69 e0       	ldi	r22, 0x09	; 9
    7ea6:	70 e0       	ldi	r23, 0x00	; 0
    7ea8:	80 e0       	ldi	r24, 0x00	; 0
    7eaa:	90 e0       	ldi	r25, 0x00	; 0
    7eac:	94 df       	rcall	.-216    	; 0x7dd6 <FLASH_readByte>
    7eae:	8a 33       	cpi	r24, 0x3A	; 58
    7eb0:	09 f0       	breq	.+2      	; 0x7eb4 <CheckFlashImage+0xa2>
    7eb2:	6f c0       	rjmp	.+222    	; 0x7f92 <CheckFlashImage+0x180>
    7eb4:	8c e4       	ldi	r24, 0x4C	; 76
    7eb6:	a6 df       	rcall	.-180    	; 0x7e04 <putch>
    7eb8:	67 e0       	ldi	r22, 0x07	; 7
    7eba:	70 e0       	ldi	r23, 0x00	; 0
    7ebc:	80 e0       	ldi	r24, 0x00	; 0
    7ebe:	90 e0       	ldi	r25, 0x00	; 0
    7ec0:	8a df       	rcall	.-236    	; 0x7dd6 <FLASH_readByte>
    7ec2:	c8 2f       	mov	r28, r24
    7ec4:	68 e0       	ldi	r22, 0x08	; 8
    7ec6:	70 e0       	ldi	r23, 0x00	; 0
  {
#ifdef DEBUG_ON
    putch('L');
    7ec8:	80 e0       	ldi	r24, 0x00	; 0
    7eca:	90 e0       	ldi	r25, 0x00	; 0
    7ecc:	84 df       	rcall	.-248    	; 0x7dd6 <FLASH_readByte>
#endif
    
    uint16_t imagesize = (FLASH_readByte(7)<<8) | FLASH_readByte(8);
    7ece:	d0 e0       	ldi	r29, 0x00	; 0
    7ed0:	dc 2f       	mov	r29, r28
    7ed2:	cc 27       	eor	r28, r28
    7ed4:	c8 2b       	or	r28, r24
    7ed6:	c0 fd       	sbrc	r28, 0
    7ed8:	69 c0       	rjmp	.+210    	; 0x7fac <CheckFlashImage+0x19a>
    7eda:	19 9a       	sbi	0x03, 1	; 3
    7edc:	c1 2c       	mov	r12, r1
    7ede:	d1 2c       	mov	r13, r1
    7ee0:	00 e0       	ldi	r16, 0x00	; 0
    7ee2:	10 e0       	ldi	r17, 0x00	; 0
    7ee4:	bb 24       	eor	r11, r11
    7ee6:	b3 94       	inc	r11
    7ee8:	83 e0       	ldi	r24, 0x03	; 3
    7eea:	a8 2e       	mov	r10, r24
    7eec:	95 e0       	ldi	r25, 0x05	; 5
    7eee:	99 2e       	mov	r9, r25
    if (imagesize%2!=0) return; //basic check that we got even # of bytes
    7ef0:	0c 17       	cp	r16, r28
    7ef2:	1d 07       	cpc	r17, r29
    
    uint16_t b, i, nextAddress=0;
    
    LED_PIN |= _BV(LED);
    7ef4:	08 f0       	brcs	.+2      	; 0x7ef8 <CheckFlashImage+0xe6>
#endif
    
    uint16_t imagesize = (FLASH_readByte(7)<<8) | FLASH_readByte(8);
    if (imagesize%2!=0) return; //basic check that we got even # of bytes
    
    uint16_t b, i, nextAddress=0;
    7ef6:	30 c0       	rjmp	.+96     	; 0x7f58 <CheckFlashImage+0x146>
    7ef8:	8a e2       	ldi	r24, 0x2A	; 42
    
    LED_PIN |= _BV(LED);
    for (i=0; i<imagesize; i+=2)
    7efa:	84 df       	rcall	.-248    	; 0x7e04 <putch>
    7efc:	b8 01       	movw	r22, r16
#endif
      
      //read 2 bytes (16 bits) from flash image, transfer them to page buffer
      b = FLASH_readByte(i+10); // flash image starts at position 10 on the external flash memory: FLX:XX:FLASH_IMAGE_BYTES_HERE...... (XX = two size bytes)
      b |= FLASH_readByte(i+11) << 8; //bytes are stored big endian on external flash, need to flip the bytes to little endian for transfer to internal flash
      __boot_page_fill_short((uint16_t)(void*)i,b);
    7efe:	66 5f       	subi	r22, 0xF6	; 246
    7f00:	7f 4f       	sbci	r23, 0xFF	; 255

      //when 1 page is full (or we're on the last page), write it to the internal flash memory
      if ((i+2)%SPM_PAGESIZE==0 || (i+2==imagesize))
      {
        __boot_page_erase_short((uint16_t)(void*)nextAddress); //(i+2-SPM_PAGESIZE)
    7f02:	80 e0       	ldi	r24, 0x00	; 0
    7f04:	90 e0       	ldi	r25, 0x00	; 0
        boot_spm_busy_wait();
        // Write from programming buffer
        __boot_page_write_short((uint16_t)(void*)nextAddress ); //(i+2-SPM_PAGESIZE)
    7f06:	67 df       	rcall	.-306    	; 0x7dd6 <FLASH_readByte>
    7f08:	e8 2e       	mov	r14, r24
    if (imagesize%2!=0) return; //basic check that we got even # of bytes
    
    uint16_t b, i, nextAddress=0;
    
    LED_PIN |= _BV(LED);
    for (i=0; i<imagesize; i+=2)
    7f0a:	f1 2c       	mov	r15, r1
    7f0c:	b8 01       	movw	r22, r16
    7f0e:	65 5f       	subi	r22, 0xF5	; 245
    7f10:	7f 4f       	sbci	r23, 0xFF	; 255
    {
#ifdef DEBUG_ON
      putch('*');
    7f12:	80 e0       	ldi	r24, 0x00	; 0
    7f14:	90 e0       	ldi	r25, 0x00	; 0
    7f16:	5f df       	rcall	.-322    	; 0x7dd6 <FLASH_readByte>
#endif
      
      //read 2 bytes (16 bits) from flash image, transfer them to page buffer
      b = FLASH_readByte(i+10); // flash image starts at position 10 on the external flash memory: FLX:XX:FLASH_IMAGE_BYTES_HERE...... (XX = two size bytes)
    7f18:	f8 2a       	or	r15, r24
    7f1a:	f8 01       	movw	r30, r16
    7f1c:	07 01       	movw	r0, r14
    7f1e:	b7 be       	out	0x37, r11	; 55
    7f20:	e8 95       	spm
    7f22:	11 24       	eor	r1, r1
    7f24:	0e 5f       	subi	r16, 0xFE	; 254
    7f26:	1f 4f       	sbci	r17, 0xFF	; 255
    7f28:	c8 01       	movw	r24, r16
      b |= FLASH_readByte(i+11) << 8; //bytes are stored big endian on external flash, need to flip the bytes to little endian for transfer to internal flash
    7f2a:	8f 77       	andi	r24, 0x7F	; 127
    7f2c:	99 27       	eor	r25, r25
    7f2e:	89 2b       	or	r24, r25
    7f30:	19 f0       	breq	.+6      	; 0x7f38 <CheckFlashImage+0x126>
    7f32:	c0 17       	cp	r28, r16
    7f34:	d1 07       	cpc	r29, r17
    7f36:	e1 f6       	brne	.-72     	; 0x7ef0 <CheckFlashImage+0xde>
      __boot_page_fill_short((uint16_t)(void*)i,b);
    7f38:	f6 01       	movw	r30, r12
    7f3a:	a7 be       	out	0x37, r10	; 55
    7f3c:	e8 95       	spm
    7f3e:	07 b6       	in	r0, 0x37	; 55
    7f40:	00 fc       	sbrc	r0, 0
    7f42:	fd cf       	rjmp	.-6      	; 0x7f3e <CheckFlashImage+0x12c>

      //when 1 page is full (or we're on the last page), write it to the internal flash memory
      if ((i+2)%SPM_PAGESIZE==0 || (i+2==imagesize))
    7f44:	f6 01       	movw	r30, r12
    7f46:	97 be       	out	0x37, r9	; 55
    7f48:	e8 95       	spm
    7f4a:	07 b6       	in	r0, 0x37	; 55
    7f4c:	00 fc       	sbrc	r0, 0
    7f4e:	fd cf       	rjmp	.-6      	; 0x7f4a <CheckFlashImage+0x138>
    7f50:	f0 e8       	ldi	r31, 0x80	; 128
    7f52:	cf 0e       	add	r12, r31
    7f54:	d1 1c       	adc	r13, r1
    7f56:	cc cf       	rjmp	.-104    	; 0x7ef0 <CheckFlashImage+0xde>
      {
        __boot_page_erase_short((uint16_t)(void*)nextAddress); //(i+2-SPM_PAGESIZE)
    7f58:	19 98       	cbi	0x03, 1	; 3
    7f5a:	81 e1       	ldi	r24, 0x11	; 17
    7f5c:	87 bf       	out	0x37, r24	; 55
        boot_spm_busy_wait();
    7f5e:	e8 95       	spm
    7f60:	85 e4       	ldi	r24, 0x45	; 69
    7f62:	50 df       	rcall	.-352    	; 0x7e04 <putch>
        // Write from programming buffer
        __boot_page_write_short((uint16_t)(void*)nextAddress ); //(i+2-SPM_PAGESIZE)
    7f64:	2a 96       	adiw	r28, 0x0a	; 10
    7f66:	61 e0       	ldi	r22, 0x01	; 1
    7f68:	c1 30       	cpi	r28, 0x01	; 1
        boot_spm_busy_wait();
    7f6a:	d0 48       	sbci	r29, 0x80	; 128
    7f6c:	10 f4       	brcc	.+4      	; 0x7f72 <CheckFlashImage+0x160>
    7f6e:	82 e5       	ldi	r24, 0x52	; 82
        nextAddress += SPM_PAGESIZE;
    7f70:	01 c0       	rjmp	.+2      	; 0x7f74 <CheckFlashImage+0x162>
    7f72:	88 ed       	ldi	r24, 0xD8	; 216
    7f74:	21 df       	rcall	.-446    	; 0x7db8 <FLASH_command>
    7f76:	80 e0       	ldi	r24, 0x00	; 0
      }
    }
    LED_PIN &= ~_BV(LED);
    7f78:	11 df       	rcall	.-478    	; 0x7d9c <SPI_transfer>

#if defined(RWWSRE)
    // Reenable read access to flash
    boot_rww_enable();
    7f7a:	80 e0       	ldi	r24, 0x00	; 0
    7f7c:	0f df       	rcall	.-482    	; 0x7d9c <SPI_transfer>
    7f7e:	80 e0       	ldi	r24, 0x00	; 0
#endif

#ifdef DEBUG_ON
    putch('E');
    7f80:	0d df       	rcall	.-486    	; 0x7d9c <SPI_transfer>
    7f82:	28 9a       	sbi	0x05, 0	; 5
    7f84:	88 e1       	ldi	r24, 0x18	; 24
#endif

    //erase the first 32/64K block where flash image resided (atmega328 should be less than 31K, and atmega1284 can be up to 64K)
    if (imagesize+10<=32768 || deviceId == 0x0102 ) //SPIFLASH_BLOCKERASE_32K is not working on the 32Mbit Spansion S25FL032P 
    7f86:	80 93 60 00 	sts	0x0060, r24
    7f8a:	88 e0       	ldi	r24, 0x08	; 8
    7f8c:	80 93 60 00 	sts	0x0060, r24
	FLASH_command(SPIFLASH_BLOCKERASE_32K, 1); 
    7f90:	ff cf       	rjmp	.-2      	; 0x7f90 <CheckFlashImage+0x17e>
    7f92:	88 e5       	ldi	r24, 0x58	; 88
    else FLASH_command(SPIFLASH_BLOCKERASE_64K, 1);
    7f94:	df 91       	pop	r29
    7f96:	cf 91       	pop	r28
    7f98:	1f 91       	pop	r17
    SPI_transfer(0);
    7f9a:	0f 91       	pop	r16
    7f9c:	ff 90       	pop	r15
    7f9e:	ef 90       	pop	r14
    SPI_transfer(0);
    7fa0:	df 90       	pop	r13
    7fa2:	cf 90       	pop	r12
    7fa4:	bf 90       	pop	r11
    SPI_transfer(0);
    7fa6:	af 90       	pop	r10
    7fa8:	9f 90       	pop	r9
    7faa:	2c cf       	rjmp	.-424    	; 0x7e04 <putch>
    FLASH_UNSELECT;
    7fac:	df 91       	pop	r29
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fae:	cf 91       	pop	r28
    7fb0:	1f 91       	pop	r17
    7fb2:	0f 91       	pop	r16
  WDTCSR = x;
    7fb4:	ff 90       	pop	r15
    7fb6:	ef 90       	pop	r14
    7fb8:	df 90       	pop	r13
    7fba:	cf 90       	pop	r12
    //now trigger a watchdog reset
    watchdogConfig(WATCHDOG_16MS);  // short WDT timeout
    while (1); 		                  // and busy-loop so that WD causes a reset and app start
  }
#ifdef DEBUG_ON
  putch('X');
    7fbc:	bf 90       	pop	r11
#endif
}
    7fbe:	af 90       	pop	r10
    7fc0:	9f 90       	pop	r9
    7fc2:	08 95       	ret

00007fc4 <getch>:

#ifdef LED_DATA_FLASH
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7fc4:	19 9a       	sbi	0x03, 1	; 3
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7fc6:	80 91 c0 00 	lds	r24, 0x00C0
    7fca:	87 ff       	sbrs	r24, 7
    7fcc:	fc cf       	rjmp	.-8      	; 0x7fc6 <getch+0x2>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7fce:	80 91 c0 00 	lds	r24, 0x00C0
    7fd2:	84 fd       	sbrc	r24, 4
    7fd4:	01 c0       	rjmp	.+2      	; 0x7fd8 <getch+0x14>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fd6:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7fd8:	80 91 c6 00 	lds	r24, 0x00C6

#ifdef LED_DATA_FLASH
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7fdc:	19 9a       	sbi	0x03, 1	; 3
#endif
#endif

  return ch;
}
    7fde:	08 95       	ret

00007fe0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fe0:	f1 df       	rcall	.-30     	; 0x7fc4 <getch>
    7fe2:	80 32       	cpi	r24, 0x20	; 32
    7fe4:	39 f0       	breq	.+14     	; 0x7ff4 <verifySpace+0x14>
    7fe6:	88 e1       	ldi	r24, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fe8:	80 93 60 00 	sts	0x0060, r24
    7fec:	88 e0       	ldi	r24, 0x08	; 8
  WDTCSR = x;
    7fee:	80 93 60 00 	sts	0x0060, r24
    7ff2:	ff cf       	rjmp	.-2      	; 0x7ff2 <verifySpace+0x12>
    7ff4:	84 e1       	ldi	r24, 0x14	; 20
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7ff6:	06 cf       	rjmp	.-500    	; 0x7e04 <putch>

00007ff8 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7ff8:	cf 93       	push	r28
    7ffa:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7ffc:	e3 df       	rcall	.-58     	; 0x7fc4 <getch>
    7ffe:	c1 50       	subi	r28, 0x01	; 1
    8000:	e9 f7       	brne	.-6      	; 0x7ffc <getNch+0x4>
    8002:	cf 91       	pop	r28
  verifySpace();
}
    8004:	ed cf       	rjmp	.-38     	; 0x7fe0 <verifySpace>

00008006 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    8006:	e0 e6       	ldi	r30, 0x60	; 96
    8008:	f0 e0       	ldi	r31, 0x00	; 0
    800a:	98 e1       	ldi	r25, 0x18	; 24
    800c:	90 83       	st	Z, r25
  WDTCSR = x;
    800e:	80 83       	st	Z, r24
    8010:	08 95       	ret

00008012 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    8012:	28 2e       	mov	r2, r24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    8014:	e0 e6       	ldi	r30, 0x60	; 96
    8016:	f0 e0       	ldi	r31, 0x00	; 0
    8018:	88 e1       	ldi	r24, 0x18	; 24
    801a:	80 83       	st	Z, r24
  WDTCSR = x;
    801c:	10 82       	st	Z, r1
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));

  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
    801e:	ee 27       	eor	r30, r30
    8020:	ff 27       	eor	r31, r31
    8022:	09 94       	ijmp
